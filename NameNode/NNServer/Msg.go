// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package NNServer

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - ErrCode
//  - ErrMsg
//  - Info
type Resp struct {
  ErrCode int32 `thrift:"errCode,1,required" db:"errCode" json:"errCode"`
  ErrMsg string `thrift:"errMsg,2,required" db:"errMsg" json:"errMsg"`
  Info *string `thrift:"info,3" db:"info" json:"info,omitempty"`
}

func NewResp() *Resp {
  return &Resp{}
}


func (p *Resp) GetErrCode() int32 {
  return p.ErrCode
}

func (p *Resp) GetErrMsg() string {
  return p.ErrMsg
}
var Resp_Info_DEFAULT string
func (p *Resp) GetInfo() string {
  if !p.IsSetInfo() {
    return Resp_Info_DEFAULT
  }
return *p.Info
}
func (p *Resp) IsSetInfo() bool {
  return p.Info != nil
}

func (p *Resp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrCode bool = false;
  var issetErrMsg bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetErrCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetErrMsg = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrCode is not set"));
  }
  if !issetErrMsg{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrMsg is not set"));
  }
  return nil
}

func (p *Resp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrCode = v
}
  return nil
}

func (p *Resp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrMsg = v
}
  return nil
}

func (p *Resp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Info = &v
}
  return nil
}

func (p *Resp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Resp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Resp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errCode: ", p), err) }
  return err
}

func (p *Resp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errMsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errMsg: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ErrMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errMsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errMsg: ", p), err) }
  return err
}

func (p *Resp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetInfo() {
    if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:info: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Info)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.info (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:info: ", p), err) }
  }
  return err
}

func (p *Resp) Equals(other *Resp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrCode != other.ErrCode { return false }
  if p.ErrMsg != other.ErrMsg { return false }
  if p.Info != other.Info {
    if p.Info == nil || other.Info == nil {
      return false
    }
    if (*p.Info) != (*other.Info) { return false }
  }
  return true
}

func (p *Resp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Resp(%+v)", *p)
}

